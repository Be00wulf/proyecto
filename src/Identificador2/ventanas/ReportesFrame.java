/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Identificador2.ventanas;

import Identificador2.Token;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author orcha
 */
public class ReportesFrame extends javax.swing.JFrame {

    /**
     * Creates new form ReportesFrame
     */
    
    
    public ReportesFrame() {
        initComponents();
        

        //reporteTokens.setValueAt(token.getNombre(), 1, 1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        reporteTokens = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        reporteTokens.setAutoCreateRowSorter(true);
        reporteTokens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Token", "Lexema", "Posicion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(reporteTokens);
        if (reporteTokens.getColumnModel().getColumnCount() > 0) {
            reporteTokens.getColumnModel().getColumn(0).setResizable(false);
            reporteTokens.getColumnModel().getColumn(1).setResizable(false);
            reporteTokens.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel1.setText("ANALISIS DE TOKENS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void llenarTabla(ArrayList<Token> token) {
        try {

            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Token");
            model.addColumn("Lexema");
            model.addColumn("Posicion");
            model.setRowCount(token.size());
            int i = 0;
            for (Token token1 : token) {
                //tableEror.setValueAt(token1.getNombre(), i, 0);
                model.setValueAt(token1.getNombre(), i, 0);
                model.setValueAt(token1.getLexema(), i, 1);
                model.setValueAt(token1.getPosicion(), i, 2);
                i++;

                //new Object[0]("hola", "adios");
                reporteTokens.setModel(model);
                //llenarTabla(tokensErrores, tableEror);

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al insertar a tabla");
        }
        
    }

    public void llenarTablaCantidad(ArrayList<Token> token) {
        ArrayList<Token> noR = new ArrayList();
        
        
        
        for (Token token1 : token) {
            int cantidad = 0;
            String lex = "";
            for (Token token2 : token) {
                if (token1.getLexema().equals(token2.getLexema())) {
                    cantidad++;
                }
            }
            if (agragarONo(noR, token1.getLexema())) {
                token1.setCant(cantidad);
                noR.add(token1);
                /*System.out.println("toke " + token1.getLexema() + "  " + cantidad);
                
                System.out.println("token 2 " + token1.getLexema() + "  " + token1.getCant());*/
                
                
            }

            
            //llenarTabla(tokensErrores, tableEror);  

        }
        llenadaCantidad(noR);
        
    }
    public void llenadaCantidad(ArrayList<Token> token){
        DefaultTableModel model1 = new DefaultTableModel();
        //model.addColumn("NOmbre");
        
        model1.addColumn("Lexema");
        model1.addColumn("Token ");
        model1.addColumn("Cantidad ");
        model1.setRowCount(token.size());
        int i = 0;
        for (Token token1 : token) {
            model1.setValueAt(token1.getLexema(), i, 0);
                model1.setValueAt(token1.getNombre(), i, 1);
                model1.setValueAt(token1.getCant(), i, 2);
                i++;
            
        }
        //tableCant.setModel(model1);
    }

    public boolean agragarONo(ArrayList<Token> token, String tok) {
        boolean yesNot = false;
        for (Token token1 : token) {
            if (token1.getLexema().equals(tok)) {
                return false;
            }
        }
        return true;
    }
    
    void reset() {
  
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable reporteTokens;
    // End of variables declaration//GEN-END:variables
}
